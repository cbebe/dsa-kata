from typing import Callable, TypeVar

from fem import expect

#           1       2
#      (1) --- (4) ---- (5)
#  3 /  |     5 |   18  /|
# (0)  4| ------|------- | 1
#   1\  |/      |        |
#      (2) --- (3) ---- (6)
#           7       1
list1 = [
    [(1, 3), (2, 1)],
    [(0, 3), (2, 4), (4, 1)],
    [(1, 4), (3, 7), (0, 1)],
    [(2, 7), (4, 5), (6, 1)],
    [(1, 1), (3, 5), (5, 2)],
    [(6, 1), (4, 2), (2, 18)],
    [(3, 1), (5, 1)],
]
#     >(1)<--->(4) ---->(5)
#    /          |       /|
# (0)     ------|------- |
#    \   v      v        v
#     >(2) --> (3) <----(6)
list2 = [
    [(1, 3), (2, 1)],
    [(4, 1)],
    [(3, 7)],
    [],
    [(1, 1), (3, 5), (5, 2)],
    [(2, 18), (6, 1)],
    [(3, 1)],
]

#     >(1)<--->(4) ---->(5)
#    /          |       /|
# (0)     ------|------- |
#    \   v      v        v
#     >(2) --> (3) <----(6)
matrix2 = [
    [0, 3, 1,  0, 0, 0, 0],
    [0, 0, 0,  0, 1, 0, 0],
    [0, 0, 7,  0, 0, 0, 0],
    [0, 0, 0,  0, 0, 0, 0],
    [0, 1, 0,  5, 0, 2, 0],
    [0, 0, 18, 0, 0, 0, 1],
    [0, 0, 0,  1, 0, 0, 1],
]

AdjList = list[list[tuple[int, int]]]
AdjMat = list[list[int]]
T = TypeVar('T')
GraphTraversal = Callable[[T, int, int], list[int] | None]


def test_graph_traversal(gt: GraphTraversal, g: T, directed=True):
    expect(gt(g, 0, 6)).toEqual([0, 1, 4, 5, 6])
    if directed:
        expect(gt(g, 6, 0)).toEqual(None)
